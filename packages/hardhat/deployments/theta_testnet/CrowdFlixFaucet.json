{
  "address": "0xa3a708f2dac3F94789E98639Fb604437bf75FE38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdFlixToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crowdFlixToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f2668cead0bfcf3d78228324d43849dad03293da9e762a2fadb6fe9a6927afa",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xc609039aB9266a558ac84AA0067aaf26B24264b9",
    "contractAddress": "0xa3a708f2dac3F94789E98639Fb604437bf75FE38",
    "transactionIndex": 1,
    "gasUsed": "299517",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x95660ceb6b409296751b531ef2bf906893d0b16cda7c3311fb50458e5e35f8f8",
    "transactionHash": "0x0f2668cead0bfcf3d78228324d43849dad03293da9e762a2fadb6fe9a6927afa",
    "logs": [],
    "blockNumber": 27339567,
    "cumulativeGasUsed": "299517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x680CB1c26DEa1075bf02469fCf2007520C656689"
  ],
  "numDeployments": 1,
  "solcInputHash": "cab52373be9389c76f3b4aed797e399f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdFlixToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdFlixToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFlixFaucet.sol\":\"CrowdFlixFaucet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/CrowdFlixFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract CrowdFlixFaucet {\\n    IERC20 public immutable crowdFlixToken;\\n    uint256 public claimLimit = 333 * 10 ** 18; // Example limit\\n    mapping(address => uint256) public lastClaimTime;\\n\\n    constructor(address _crowdFlixToken) {\\n        crowdFlixToken = IERC20(_crowdFlixToken);\\n    }\\n\\n    function claim() public {\\n        require(block.timestamp - lastClaimTime[msg.sender] >= 3600, \\\"Cooldown period not met\\\"); // 1 hour cooldown\\n        require(crowdFlixToken.balanceOf(address(this)) >= claimLimit, \\\"Insufficient tokens\\\");\\n\\n        crowdFlixToken.transfer(msg.sender, claimLimit);\\n        lastClaimTime[msg.sender] = block.timestamp;\\n    }\\n}\",\"keccak256\":\"0x46ab6467ff4d4d05d79013442789486e8c9c6aefb0e525e2e667e7f97add1717\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007f57601f6103d338819003918201601f19168301916001600160401b038311848410176100845780849260209460405283398101031261007f57516001600160a01b0381169081900361007f5768120d4da7b0bd140000600055608052604051610338908161009b823960805181818160f2015261029b0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182634657e0c414610287575081634e71d92d146100ae578163b77cf9c614610070575063be6106761461005157600080fd5b3461006c578160031936011261006c57602091549051908152f35b5080fd5b9050346100aa5760203660031901126100aa57356001600160a01b038116908190036100aa57828291602094526001845220549051908152f35b8280fd5b9050346100aa57826003193601126100aa573383526020906001825282842054420342811161027457610e10116102335782516370a0823160e01b815230818301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316918382602481865afa9182156102295786926101f6575b5085548092106101bd579060448492878751958694859363a9059cbb60e01b8552339085015260248401525af180156101b057610179575b5060019033845252429082205580f35b8181813d83116101a9575b61018e81836102ca565b810103126101a55751801515036100aa5738610169565b8380fd5b503d610184565b50505051903d90823e3d90fd5b845162461bcd60e51b81529081018490526013602482015272496e73756666696369656e7420746f6b656e7360681b6044820152606490fd5b9091508381813d8311610222575b61020e81836102ca565b8101031261021e57519038610131565b8580fd5b503d610204565b85513d88823e3d90fd5b915162461bcd60e51b815291820152601760248201527f436f6f6c646f776e20706572696f64206e6f74206d65740000000000000000006044820152606490fd5b634e487b7160e01b855260118252602485fd5b84903461006c578160031936011261006c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176102ec57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220226c2a65a0127950d5e450c913a87fa41a90b647ea3666dcd9deb8230630eb0164736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182634657e0c414610287575081634e71d92d146100ae578163b77cf9c614610070575063be6106761461005157600080fd5b3461006c578160031936011261006c57602091549051908152f35b5080fd5b9050346100aa5760203660031901126100aa57356001600160a01b038116908190036100aa57828291602094526001845220549051908152f35b8280fd5b9050346100aa57826003193601126100aa573383526020906001825282842054420342811161027457610e10116102335782516370a0823160e01b815230818301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316918382602481865afa9182156102295786926101f6575b5085548092106101bd579060448492878751958694859363a9059cbb60e01b8552339085015260248401525af180156101b057610179575b5060019033845252429082205580f35b8181813d83116101a9575b61018e81836102ca565b810103126101a55751801515036100aa5738610169565b8380fd5b503d610184565b50505051903d90823e3d90fd5b845162461bcd60e51b81529081018490526013602482015272496e73756666696369656e7420746f6b656e7360681b6044820152606490fd5b9091508381813d8311610222575b61020e81836102ca565b8101031261021e57519038610131565b8580fd5b503d610204565b85513d88823e3d90fd5b915162461bcd60e51b815291820152601760248201527f436f6f6c646f776e20706572696f64206e6f74206d65740000000000000000006044820152606490fd5b634e487b7160e01b855260118252602485fd5b84903461006c578160031936011261006c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176102ec57604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220226c2a65a0127950d5e450c913a87fa41a90b647ea3666dcd9deb8230630eb0164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 90,
        "contract": "contracts/CrowdFlixFaucet.sol:CrowdFlixFaucet",
        "label": "claimLimit",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 94,
        "contract": "contracts/CrowdFlixFaucet.sol:CrowdFlixFaucet",
        "label": "lastClaimTime",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}